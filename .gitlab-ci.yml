stages:
  - static-analysis
  - build
  - test
  - deploy

before_script:
  - echo "Setting up environment"
  - apt-get update -y && apt-get install -qq curl > /dev/null
  - curl -fsSL https://get.docker.com -o get-docker.sh && sed 's/sleep [0-9]\+/sleep 0/g' ./get-docker.sh > docker-setup.sh && sh ./docker-setup.sh > /dev/null
  - apt-get install -qq cargo libssl-dev pkg-config openjdk-17-jdk > /dev/null

static-analysis-job:
  stage: static-analysis
  rules:
    - if: $SONAR_HOST_URL
    - if: $SONAR_TOKEN
  image:
    name: sonarsource/sonar-scanner-cli:5.0
    entrypoint: [""]
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner
  allow_failure: true

build-job:
  stage: build
  script:
    - echo "Compiling services and publishing to local registry..."
    - docker compose build

unit-test-job:
  stage: test
  script:
    - echo "Running unit tests..."
    - echo "Running service1 unit tests..."
    - cd ./service1 && cargo test && cd ..
    - echo "Running service2 unit tests..."
    - cd ./service2 && chmod +x ./gradlew && ./gradlew test --no-daemon && cd ..
    - echo "Running monitor unit tests..."
    - cd ./monitor && chmod +x ./gradlew && ./gradlew test --no-daemon && cd ..
    - echo "Running gateway tests..."
    - cd ./gateway && chmod +x ./gradlew && ./gradlew test --no-daemon && cd ..

system-test-job:
  stage: test
  script:
    - echo "Running system tests..."
    - GATEWAY_PORT=8088 docker compose -p testing-env up -d --build --wait && sleep 5
    - docker build -t api-tester ./tests && docker run --rm --network testing-env_default api-tester
  after_script:
    - docker compose -p testing-env down

deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - docker compose up -d
