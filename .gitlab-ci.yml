stages:
  - build
  - test
  - deploy

before_script:
  - echo "Setting up environment"
  - apt-get update -y && apt-get install -qq curl > /dev/null
  - curl -fsSL https://get.docker.com -o get-docker.sh && sh ./get-docker.sh > /dev/null
  - apt-get install -qq cargo libssl-dev pkg-config openjdk-17-jdk > /dev/null

build-job:
  stage: build
  script:
    - echo "Compiling services and publishing to local registry..."
    - docker compose build

unit-test-job:
  stage: test
  script:
    - echo "Running unit tests..."
    - echo "Running service1 unit tests..."
    - cd ./service1 && cargo test && cd ..
    - echo "Running service2 unit tests..."
    - cd ./service2 && chmod +x ./gradlew && ./gradlew test && cd ..
    - echo "Running monitor unit tests..."
    - cd ./monitor && chmod +x ./gradlew && ./gradlew test && cd ..

integration-test-job:
  stage: test
  script:
    - echo "Running integration tests..."
    - MONITOR_PORT=8088 docker compose -p testing-env up -d --build --wait
    - cd ./tests
    - sleep 5 && docker run --rm --network testing-env_default -v ${PWD}/apis:/apis schemathesis/schemathesis:v3.21.0-buster run --checks all --base-url http://monitor:8080 /apis/openapi.yml
    - cd ..
    - docker compose -p testing-env down

deploy-job:
  stage: deploy
  environment: production
  script:
    - echo "Deploying application..."
    - docker compose up -d
